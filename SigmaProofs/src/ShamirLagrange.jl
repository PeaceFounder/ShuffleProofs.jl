module ShamirLagrange

# Shamir secret sharing via Lagrange interpolation offers a natural way to split a secret generated by a dealer
# among multiple participants in a verifiable manner. The verifiability enables to everyone participate in the
# protocol as a dealer;

# 1) The protocol starts by generating a list of coordinates x_i at which polynomial is to be evaluated on a buletin board; they 
# can be choosen as independent generators for convinience
# 2) The protocol starts by a dealer generating a polynomial coeficients f(x) = \sum_i a_i x^i (over a field of integers of order q)
# 3) The dealer genreates a commitment for each polynom coefficient Com(a_j) = g^{a_j} h^{r_j} 
# 4) The dealer evaluates d_i = f(x_i) and forms commitment for each value Com(d_i) (randomness is reaused from previous steps); Everyone can verify that commitment for d_i to be consistent for its evaluation with polynomial as Com(d_i) = Com(f(x_i)) = \prod (Com(a_j))^{x_i^j}; 
# 5) The participant receives secret d_i from the dealer confidnetially and can verify it to be consistent with pulbic commitment 
# also knowing publicallly listed h^{r_i} and g^d_i; At this point participants are equiped to particpate in decryption ceremony


# Threshold decryption

# 1) Coordinates at which polynomial evaluations happen are published on the buletin board as well as g^d_i
# 2) Every participant simultanously receives cyphertexts and performs decryption P_i = C_2^d_i and provides
#  coresponding logarithmic equality proofs; The partial decryptions are published on the buletin board
# 3) At the end the shares can be combined via lagrange interpolation l_i = prod x_j/(x_j - x_i) and computed decryption as M = C_1 * \prod_i P_i^l_i

end
